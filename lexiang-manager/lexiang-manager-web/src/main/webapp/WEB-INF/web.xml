<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://java.sun.com/xml/ns/javaee" xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
	id="taotao" version="2.5">
	<display-name>lexiang-web</display-name>
	<welcome-file-list>
		<welcome-file>index.html</welcome-file>
		<welcome-file>index.htm</welcome-file>
		<welcome-file>index.jsp</welcome-file>
		<welcome-file>default.html</welcome-file>
		<welcome-file>default.htm</welcome-file>
		<welcome-file>default.jsp</welcome-file>
	</welcome-file-list>
	
<!-- 	
	配置spring父容器-->
		<listener>
			<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
		</listener>
		
		<context-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>classpath:spring/applicationContext-*.xml</param-value>
		</context-param>
	
	<!-- 
	spring中的提供了一个名为org.springframework.web.util.IntrospectorCleanupListener的监听器。
	它主要负责处理由　JavaBeans Introspector的使用而引起的缓冲泄露。
	spring中对它的描述如下：它是一个在web应用关闭的时候,清除JavaBeans Introspector的监听器
	.web.xml中注册这个listener.可以保证在web 应用关闭的时候释放与掉这个web 应用相关的
	class loader 和由它管理的类如果你使用了JavaBeans Introspector来分析应用中的类,
	Introspector 缓冲中会保留这些类的引用.结果在你的应用关闭的时候,这些类以及web 应用相关的
	class loader没有被垃圾回收.不幸的是,清除Introspector的唯一方式是刷新整个缓冲.
	这是因为我们没法判断哪些是属于你的应用的引用.所以删除被缓冲的introspection会导致把这台电脑上的所有应用的
	introspection都删掉.需要注意的是,spring 托管的bean不需要使用这个监听器.
	因为spring它自己的introspection所使用的缓冲在分析完一个类之后会被马上从
	javaBeans Introspector缓冲中清除掉.应用程序中的类从来不直接使用JavaBeans Introspector
	.所以他们一般不会导致内部查看资源泄露.但是一些类库和框架往往会产生这个问题.
	例如:Struts 和Quartz.单个的内部查看泄漏会导致整个的web应用的类加载器不能进行垃圾回收
	 -->	
  <listener>
    <listener-class>org.springframework.web.util.IntrospectorCleanupListener</listener-class>
  </listener>
	<!-- 验证码部分 -->	
	<servlet>
        <servlet-name>imageServlet</servlet-name>
        <servlet-class>com.lexiang.main.web.checkcode.CheckCodeUtils</servlet-class>
        <init-param>
        <!-- 图宽 -->
            <param-name>imgWidth</param-name>
            <param-value>200</param-value>
        </init-param>
        <init-param>
        <!-- 图高 -->
            <param-name>imgHeight</param-name>
            <param-value>80</param-value>
        </init-param>
        <init-param>
        <!-- 显示的字符数 -->
            <param-name>codeCount</param-name>
            <param-value>5</param-value>
        </init-param>
        <init-param>
        <!-- 字体类型 -->
            <param-name>fontStyle</param-name>
            <param-value>Times New Roman</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
 
 
    <servlet-mapping>
        <servlet-name>imageServlet</servlet-name>
        <url-pattern>/imageServlet</url-pattern>
    </servlet-mapping>	
	<!-- 验证码结束 -->
	<!-- 配置 乱码拦截器 -->
		<filter>
			<filter-name>encodingFilter</filter-name>
			<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
			<init-param>
				<param-name>encoding</param-name>
				<param-value>UTF-8</param-value>
			</init-param>
		</filter>
		<filter-mapping>
			<filter-name>encodingFilter</filter-name>
			<url-pattern>/*</url-pattern>
		</filter-mapping>
	<!-- 配置springmvc 前端控制器加载spring子容器 -->
		<servlet>
			<servlet-name>dispatcher</servlet-name>
			<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
			<init-param>
				<param-name>contextConfigLocation</param-name>
				<param-value>classpath:spring/springmvc.xml</param-value>
			</init-param>
			<load-on-startup>1</load-on-startup>
		</servlet>
		<servlet-mapping>
			<servlet-name>dispatcher</servlet-name>
			<url-pattern>/</url-pattern>
		</servlet-mapping>
	 
	
	
	
</web-app>